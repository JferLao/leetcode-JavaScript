// 假设按照升序排序的数组在预先未知的某个点上进行了旋转。
// 
// ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
// 
// 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
// 
// 你可以假设数组中不存在重复的元素。
// 
// 你的算法时间复杂度必须是 O(log n) 级别。
// 
// 

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
// 思路一:直接遍历寻找
var search = function(nums, target) {
    for(i=0;i<nums.length;i++){
        if(nums[i]==target){
            return i
        }
    }
    return -1
};
// 执行用时：76 ms


/*****************************************分割线**********************************/


// 思路二:数组的indexof方法
var search = function(nums, target) {
    return nums.indexOf(target)
};
// 执行用时：100 ms

/*****************************************分割线**********************************/