// 假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。

// 给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。

// 示例 1:

// 输入: flowerbed = [1,0,0,0,1], n = 1
// 输出: True
// 示例 2:

// 输入: flowerbed = [1,0,0,0,1], n = 2
// 输出: False
// 注意:

// 数组内已种好的花不会违反种植规则。
// 输入的数组长度范围为 [1, 20000]。
// n 是非负整数，且不会超过输入数组的大小。


var canPlaceFlowers = function(arr, n) {
    // 计数器,记录可以种花的数目
    let max = 0
        // 右边界补充[0,0,0],最后一块地能不能种只取决于前面的是不是1，所以默认最后一块地的右侧是0（无须考虑右侧边界有阻碍）（LeetCode测试用例）
    arr.push(0)
    for (let i = 0, len = arr.length - 1; i < len; i++) {
        if (arr[i] === 0) {
            // 当可以种的时候下一块地肯定不能种,所以直接i++跳过当前地
            if (i === 0 && arr[1] === 0) {
                max++
                i++
            } else if (arr[i - 1] === 0 && arr[i + 1] === 0) {
                max++
                i++
            }
        }
    }
    return max >= n
};

// 执行结果：通过
// 显示详情
// 执行用时 :64 ms, 在所有 javascript 提交中击败了99.26%的用户
// 内存消耗 :37.5 MB, 在所有 javascript 提交中击败了12.19%的用户
